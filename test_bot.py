from telegram import Update
from telegram.ext import Application, CommandHandler, MessageHandler, ContextTypes, filters
import urllib.parse
import requests
from bs4 import BeautifulSoup
import random

TOKEN = "7753353202:AAEBbxRkECAO0PVKRYYo1s_DKKEQJOP0UNk"

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text(
        "–ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç.\n"
        "‚Ä¢ /music <–Ω–∞–∑–≤–∞–Ω–∏–µ> ‚Äî –ø–æ–∏—Å–∫ —Ç—Ä–µ–∫–∞ –Ω–∞ –Ø–Ω–¥–µ–∫—Å.–ú—É–∑—ã–∫–µ\n"
        "‚Ä¢ /qobuz <–Ω–∞–∑–≤–∞–Ω–∏–µ> ‚Äî –ø–æ–∏—Å–∫ —Ç—Ä–µ–∫–∞ –Ω–∞ Qobuz\n"
        "‚Ä¢ –ù–∞–ø–∏—à–∏ '–∞–Ω–µ–∫–¥–æ—Ç', '–∞—Ä–º—è–Ω—Å–∫–æ–µ —Ä–∞–¥–∏–æ' –∏–ª–∏ '—à—É—Ç–∫–∞' ‚Äî —Ä–∞—Å—Å–∫–∞–∂—É –∞–Ω–µ–∫–¥–æ—Ç!"
    )

async def music_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = " ".join(context.args)
    if not query:
        await update.message.reply_text(
            "–ù–∞–ø–∏—à–∏ –ø–æ—Å–ª–µ /music –Ω–∞–∑–≤–∞–Ω–∏–µ –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è –∏–ª–∏ –ø–µ—Å–Ω–∏, –Ω–∞–ø—Ä–∏–º–µ—Ä:\n/music Imagine Dragons Believer"
        )
        return
    url_query = urllib.parse.quote(query)
    yandex_search_url = f"https://music.yandex.ru/search?text={url_query}"
    await update.message.reply_text(f"–í–æ—Ç —Å—Å—ã–ª–∫–∞ –Ω–∞ –ø–æ–∏—Å–∫ –Ø–Ω–¥–µ–∫—Å –ú—É–∑—ã–∫–∏ –ø–æ –∑–∞–ø—Ä–æ—Å—É:\n{yandex_search_url}")

# ----------- Qobuz Search -----------
def search_qobuz_tracks(query, app_id="269645017"):
    url = "https://www.qobuz.com/api.json/0.2/search"
    params = {
        "query": query,
        "type": "tracks",
        "app_id": app_id
    }
    try:
        resp = requests.get(url, params=params, timeout=7)
        resp.raise_for_status()
        data = resp.json()
        return data.get("tracks", {}).get("items", [])
    except Exception as e:
        print("–û—à–∏–±–∫–∞ Qobuz API:", e)
        return []

async def qobuz_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = " ".join(context.args)
    if not query:
        await update.message.reply_text("–ù–∞–ø–∏—à–∏ –ø–æ—Å–ª–µ /qobuz –Ω–∞–∑–≤–∞–Ω–∏–µ –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è –∏–ª–∏ –ø–µ—Å–Ω–∏.")
        return
    tracks = search_qobuz_tracks(query)
    if not tracks:
        await update.message.reply_text("–ù–µ –Ω–∞—à—ë–ª –Ω–∏—á–µ–≥–æ –≤ Qobuz.")
        return
    reply = ""
    for t in tracks[:3]:
        title = t.get('title')
        artist = t.get('artist', {}).get('name', '')
        url = f"https://www.qobuz.com{t.get('url', '')}" if t.get('url') else ""
        reply += f"üéµ {title} ‚Äî {artist}\n–°—Å—ã–ª–∫–∞: {url}\n\n"
    await update.message.reply_text(reply or "–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ç—Ä–µ–∫–æ–≤.")

# ----------- Anecdotes -----------
def get_joke_from_anekdotru():
    url = "https://www.anekdot.ru/random/anekdot/"
    headers = {
        "User-Agent": "Mozilla/5.0"
    }
    try:
        response = requests.get(url, headers=headers, timeout=7)
        response.raise_for_status()
        soup = BeautifulSoup(response.text, "html.parser")
        jokes = [div.get_text(strip=True) for div in soup.find_all("div", class_="text")]
        if jokes:
            return random.choice(jokes)
        else:
            return "–°–µ–≥–æ–¥–Ω—è –Ω–µ—Ç –∞–Ω–µ–∫–¥–æ—Ç–æ–≤, –ø–æ–ø—Ä–æ–±—É–π —á—É—Ç—å –ø–æ–∑–∂–µ!"
    except Exception as e:
        print("–û—à–∏–±–∫–∞:", e)
        return f"–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∞–Ω–µ–∫–¥–æ—Ç —Å —Å–∞–π—Ç–∞ anekdot.ru. –ü—Ä–∏—á–∏–Ω–∞: {e}"

def get_armyanskoe_radio_joke():
    url = "https://www.anekdot.ru/tags/%D0%B0%D1%80%D0%BC%D1%8F%D0%BD%D1%81%D0%BA%D0%BE%D0%B5%20%D1%80%D0%B0%D0%B4%D0%B8%D0%BE/"
    headers = {
        "User-Agent": "Mozilla/5.0"
    }
    try:
        response = requests.get(url, headers=headers, timeout=7)
        response.raise_for_status()
        soup = BeautifulSoup(response.text, "html.parser")
        jokes = [div.get_text(strip=True) for div in soup.find_all("div", class_="text")]
        if jokes:
            return random.choice(jokes)
        else:
            return "–ù–µ—Ç —Å–≤–µ–∂–∏—Ö —à—É—Ç–æ–∫ –ø—Ä–æ –∞—Ä–º—è–Ω—Å–∫–æ–µ —Ä–∞–¥–∏–æ."
    except Exception as e:
        print("–û—à–∏–±–∫–∞:", e)
        return f"–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —à—É—Ç–∫—É –ø—Ä–æ –∞—Ä–º—è–Ω—Å–∫–æ–µ —Ä–∞–¥–∏–æ. –ü—Ä–∏—á–∏–Ω–∞: {e}"

async def reply_to_text(update: Update, context: ContextTypes.DEFAULT_TYPE):
    text = update.message.text.lower()
    if "–∞—Ä–º—è–Ω—Å–∫–æ–µ —Ä–∞–¥–∏–æ" in text:
        joke = get_armyanskoe_radio_joke()
        await update.message.reply_text(joke)
    elif any(word in text for word in ["–∞–Ω–µ–∫–¥–æ—Ç", "—à—É—Ç–∫–∞"]):
        joke = get_joke_from_anekdotru()
        await update.message.reply_text(joke)
    else:
        await update.message.reply_text(f"–¢—ã –Ω–∞–ø–∏—Å–∞–ª: {update.message.text}")

def main():
    app = Application.builder().token(TOKEN).build()
    app.add_handler(CommandHandler("start", start))
    app.add_handler(CommandHandler("music", music_command))
    app.add_handler(CommandHandler("qobuz", qobuz_command))  # –ù–æ–≤–∞—è –∫–æ–º–∞–Ω–¥–∞!
    app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, reply_to_text))
    app.run_polling()

if __name__ == "__main__":
    main()
